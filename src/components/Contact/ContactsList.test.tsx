import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import ContactsList from './ContactsList';
import { AnyAction, configureStore, Store } from '@reduxjs/toolkit';
import contactsReducer, { add as addContact } from '../../app/reducers/contactsSlice';
import searchReducer, { updateCriteria, updateFilter } from '../../app/reducers/searchSlice';
import { AddressType, EmailType, PhoneNumberType } from '../../app/models/contact';

let store: Store<any, AnyAction>;

beforeEach(() => {
  store = configureStore({
    reducer: {
      contacts: contactsReducer,
      search: searchReducer,
    },
  });
})

describe('when contacts does not exist', () => {
  test('renders no contacts found', () => {
    const { getByText } = render(
      <Provider store={store}>
        <ContactsList />
      </Provider>
    );

    expect(getByText(/no contacts found/i)).toBeInTheDocument();
  });
});

describe('when contacts present', () => {
  beforeEach(() => {
    store.dispatch(addContact({
      fullName: 'Girish Gopaul',
      dob: '05-10-1995',
      addresses: [
        {
          id: 'add1',
          type: AddressType.Home,
          value: 'Gopala Lane\nMahebourg',
        },
      ],
      emails: [
        {
          id: 'ema1',
          type: EmailType.Personal,
          value: 'girish@gopaul.me',
        },
      ],
      phoneNumbers: [
        {
          id: 'pho1',
          type: PhoneNumberType.Mobile,
          value: '59010577',
        },
      ],
      id: '', // will get generated by prepare in reducer
    }));
    store.dispatch(addContact({
      fullName: 'Drishtee Gangoosingh',
      dob: '15-05-1997',
      addresses: [
        {
          id: 'add2',
          type: AddressType.Home,
          value: 'Royal Road\nRiviere des Creoles',
        },
      ],
      emails: [
        {
          id: 'ema2',
          type: EmailType.Personal,
          value: 'drishtee@gmail.com',
        },
      ],
      phoneNumbers: [],
      id: '', // will get generated by prepare in reducer
    }));
  });

  test('contains 2 contact cards', () => {
    const { getAllByTestId } = render(
      <Provider store={store}>
        <ContactsList />
      </Provider>
    );

    expect(getAllByTestId('contact-card')).toHaveLength(2);
  });

  test('filters by name', () => {
    store.dispatch(updateCriteria('girish gop'));
    store.dispatch(updateFilter('fullName'));

    const { getAllByTestId, queryByText } = render(
      <Provider store={store}>
        <ContactsList />
      </Provider>
    );

    expect(getAllByTestId('contact-card')).toHaveLength(1);
    expect(queryByText('Girish Gopaul')).toBeInTheDocument();
    expect(queryByText('Drishtee')).not.toBeInTheDocument();
  });
});
