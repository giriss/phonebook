import React from 'react';
import { render } from '@testing-library/react';
import { Provider } from 'react-redux';
import ContactsList from './ContactsList';
import { AnyAction, configureStore, Store } from '@reduxjs/toolkit';
import contactsReducer, { add as addContact } from '../../app/reducers/contactsSlice';
import searchReducer, { updateCriteria, updateFilter } from '../../app/reducers/searchSlice';
import { AddressType, EmailType, PhoneNumberType } from '../../app/models/contact';

let store: Store<any, AnyAction>;

describe('component ContactsList', () => {
  beforeEach(() => {
    store = configureStore({
      reducer: {
        contacts: contactsReducer,
        search: searchReducer,
      },
    });
  })

  describe('when contacts does not exist', () => {
    it('renders no contacts found', () => {
      expect.assertions(1);

      const { getByText } = render(
        <Provider store={store}>
          <ContactsList />
        </Provider>
      );

      expect(getByText(/no contacts found/i)).toBeInTheDocument();
    });
  });

  describe('when contacts present', () => {
    beforeEach(() => {
      store.dispatch(addContact({
        firstName: 'Girish',
        lastName: 'Gopaul',
        dob: '05-10-1995',
        addresses: [
          {
            id: 'add1',
            type: AddressType.Home,
            value: 'Gopala Lane\nMahebourg',
          },
        ],
        emails: [
          {
            id: 'ema1',
            type: EmailType.Personal,
            value: 'girish@gopaul.me',
          },
        ],
        phoneNumbers: [
          {
            id: 'pho1',
            type: PhoneNumberType.Mobile,
            value: '59010577',
          },
        ],
        id: '', // will get generated by prepare in reducer
      }));
      store.dispatch(addContact({
        firstName: 'Drishtee',
        lastName: 'Gangoosingh',
        dob: '15-05-1997',
        addresses: [
          {
            id: 'add2',
            type: AddressType.Home,
            value: 'Royal Road\nRiviere des Creoles',
          },
        ],
        emails: [
          {
            id: 'ema2',
            type: EmailType.Personal,
            value: 'drishtee@gmail.com',
          },
        ],
        phoneNumbers: [],
        id: '', // will get generated by prepare in reducer
      }));
    });

    it('contains 2 contact cards', () => {
      expect.assertions(1);

      const { getAllByTestId } = render(
        <Provider store={store}>
          <ContactsList />
        </Provider>
      );

      expect(getAllByTestId('contact-card')).toHaveLength(2);
    });

    it('filters by first name', () => {
      expect.assertions(3);

      store.dispatch(updateCriteria('giri'));
      store.dispatch(updateFilter('firstName'));

      const { getAllByTestId, queryByText } = render(
        <Provider store={store}>
          <ContactsList />
        </Provider>
      );

      expect(getAllByTestId('contact-card')).toHaveLength(1);
      expect(queryByText('Girish Gopaul')).toBeInTheDocument();
      expect(queryByText('Drishtee')).not.toBeInTheDocument();
    });
  });
});
